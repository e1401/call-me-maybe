{"version":3,"sources":["Components/PhoneScreen.js","Components/Keypad.js","Components/Phone.js","App.js","serviceWorker.js","index.js"],"names":["PhoneScreen","props","tooManyNumbers","notEnterted","notEntered","nekiArr","val","nekiMsg","msg","okToDial","className","length","Keypad","handleButtonClick","event","target","currentTarget","preventDefault","setState","state","pressedKeys","value","console","log","handleHangupButton","handleCallButton","bind","this","onClick","id","React","Component","Phone","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b9d6ddb9.chunk.js","sourcesContent":["import React from 'react';\n\n\n// if a user clicks the green button while the numbers are not entered, give out an error message \"Please enter phone number\"\n\nconst PhoneScreen = (props) => {\n    let tooManyNumbers = props.tooManyNumbers; //for removal\n    let notEnterted = props.notEntered;\n    let nekiArr = props.val;\n    let nekiMsg = props.msg;\n    let okToDial = props.okToDial;\n\n    const powerSwitch =()=> {\n        if (nekiArr.length === 0 && notEnterted === true ) {\n            return nekiMsg[0]\n        } else if (nekiArr.length > 47) {\n            return nekiMsg[1]\n        }  else if (okToDial === true) {\n            return nekiMsg[2]\n        }\n        \n        else  { return nekiArr};\n    }\n    \n    \n    \n\n    \n\n\n    return (\n        <div className=\"phoneScreen\">\n\n            <div className=\"screenDisplayArea\">\n            \n                <div className='displayChar'>                \n                  \n                  {powerSwitch()}\n                </div>\n\n            </div>\n\n        </div>\n    )\n\n}\n\n\nexport default PhoneScreen","import React from \"react\";\nimport PhoneScreen from './PhoneScreen';\n// import CallButton from './CallButton';\n// import HangUpButton from './HangUpButton'\n\n\nexport default class Keypad extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n            value: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '*', '#'],\n            pressedKeys: [],\n            notEntered: false,\n            msg: ['Please enter phone number','Numbers limit reached', '(London) calling...'],\n            tooManyNumbers: false,\n            okToDial: false, //for calling\n            \n            //state na dobrom mjestu\n            \n            \n        };\n        this.handleButtonClick = this.handleButtonClick.bind(this);\n        this.handleHangupButton = this.handleHangupButton.bind(this);\n        this.handleCallButton = this.handleCallButton.bind(this);\n    }\n        // console.log(props)\n        // const this.state.value = props.val;\n         handleButtonClick = (event) => {\n            let target = event.currentTarget //via https://stackoverflow.com/questions/42089795/reactjs-cant-set-state-from-an-event-with-event-persist\n            event.preventDefault();\n            // this.setState({ pressedKeys: [...+ event.currentTarget.value] });\n            this.setState(state => {\n                const pressedKeys = [...state.pressedKeys, target.value]\n                return {\n                    pressedKeys,\n                    value: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '*', '#'],  \n                }\n                \n            })\n            \n            // nekiArr.push(event.currentTarget.value)\n            //https://github.com/facebook/react/issues/4745 for event.currentTarget\n            console.log(this.state)\n\n            \n        }\n\n        handleHangupButton = (event) => {\n            event.preventDefault();\n            this.setState({pressedKeys: [], notEntered: false, okToDial: false})\n        }\n\n   \n\n        handleCallButton = (event) => {\n            // console.log('some')\n            event.preventDefault();\n            \n            // this.handleButtonSwitch()\n            // console.log(this.state);\n            if (this.state.pressedKeys.length === 0 || this.state.okToDial === false) {\n                this.setState({notEntered: true, okToDial: true}, () => { console.log('The state has been updated.') });\n                \n            }\n\n        }\n        \n      \n\n        render() { \n                 return (\n                        <div>\n                            <PhoneScreen  val={this.state.pressedKeys} msg={this.state.msg} notEntered={this.state.notEntered} tooManyNumbers={this.state.tooManyNumbers} okToDial={this.state.okToDial}>\n\n\n                            </PhoneScreen>\n\n                            <div className='keypad'>\n\n                                <div className=\"keyRow\">\n                                    <button className=\"callButton\" onClick={this.handleCallButton}></button>\n                                    \n                                    <button className=\"hangUpButton\" onClick={this.handleHangupButton}></button>\n                                </div>\n\n                                <div className=\"keyRow\">\n                                    <button id=\"1\" className='button' value={this.state.value[1]} onClick={this.handleButtonClick}><span className=\"buttonChar\">{this.state.value[1]}</span></button>\n                                    <button className='button' value={this.state.value[2]} onClick={this.handleButtonClick}><span className=\"buttonChar\">{this.state.value[2]}</span></button>\n                                    <button className='button' value={this.state.value[3]} onClick={this.handleButtonClick}><span className=\"buttonChar\">{this.state.value[3]}</span></button>\n                                </div>\n                                <div className=\"keyRow\">\n                                    <button className='button' value={this.state.value[4]} onClick={this.handleButtonClick}><span className=\"buttonChar\">{this.state.value[4]}</span></button>\n                                    <button className='button' value={this.state.value[5]} onClick={this.handleButtonClick}><span className=\"buttonChar\">{this.state.value[5]}</span></button>\n                                    <button className='button' value={this.state.value[6]} onClick={this.handleButtonClick}><span className=\"buttonChar\">{this.state.value[6]}</span></button>\n                                </div>\n                                <div className=\"keyRow\">\n                                    <button className='button' value={this.state.value[7]} onClick={this.handleButtonClick}><span className=\"buttonChar\">{this.state.value[7]}</span></button>\n                                    <button className='button' value={this.state.value[8]} onClick={this.handleButtonClick}><span className=\"buttonChar\">{this.state.value[8]}</span></button>\n                                    <button className='button' value={this.state.value[9]} onClick={this.handleButtonClick}><span className=\"buttonChar\">{this.state.value[9]}</span></button>\n                                </div>\n                                <div className=\"keyRow\">\n                                    <button className='button' value={this.state.value[10]} onClick={this.handleButtonClick}><span className=\"buttonChar\">{this.state.value[10]}</span></button>\n                                    <button className='button' value={this.state.value[0]} onClick={this.handleButtonClick}><span className=\"buttonChar\">{this.state.value[0]}</span></button>\n                                    <button className='button' value={this.state.value[11]} onClick={this.handleButtonClick}><span className=\"buttonChar\">{this.state.value[11]}</span></button>\n                                </div>\n                                <div className= \"message\">\n                                    \n                                    \n                                </div>\n                            </div>\n\n                        </div>\n            )\n        }\n\n    }","import React from 'react';\n\nimport Keypad from './Keypad'\n\nexport default class Phone extends React.Component {\n\n\n\n    render () {\n        return (\n            <div className=\"phoneBase\">\n            <p className='tagline'>callMeMaybe</p>\n            \n            <div>\n           \n            <Keypad>\n                \n            </Keypad>\n            </div>\n            \n\n        </div>\n        )\n    }\n}","import React from 'react';\nimport Phone from './Components/Phone';\n\n\nimport './App.scss';\n\nexport default function App() {\n  return (\n    <div>\n      <Phone >\n\n      </Phone>\n      \n    </div>\n  );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
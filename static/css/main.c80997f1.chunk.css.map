{"version":3,"sources":["index.css","App.scss","styles/includeMedia.scss"],"names":[],"mappings":"AAAA,KACE,QAAS,CACT,mJAEY,CACZ,kCAAmC,CACnC,iCACF,CAEA,KACE,yEAEF,CCVA,YACE,wBAAyB,CACzB,gBAAiB,CACjB,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CACnB,sBAAuB,CACvB,4BAA6B,CAC7B,UAAY,CACb,UAGC,aAAc,CACf,KAKC,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CACnB,sBAAuB,CACvB,aAAc,CAef,yBApBD,YAQM,4DAA6D,CAC7D,6BAA+B,CAC/B,iBAAkB,CAClB,eAAiB,CACjB,aAAc,CACd,iBAAsB,CACtB,aAAc,CACf,CCkiBD,yBDjjBJ,KAkBI,SAAU,CAEb,CAkBD,WACE,WAAY,CACZ,YAAa,CAEb,kBAAmB,CACnB,wBAAyB,CACzB,qBAAsB,CACtB,oCAA2C,CAC3C,kBAAmB,CACnB,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CAQpB,yBAnBD,WAaI,iBAAkB,CAMrB,CCwfG,yBD3gBJ,WAgBI,WAAY,CACZ,YAAa,CAEhB,CCwfG,yBDtfJ,SAGI,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CALvB,gBASM,gCAAiC,CAGjC,6BAA+B,CAC/B,iBAAkB,CAClB,eAAiB,CACjB,cAAe,CACf,gBAAiB,CACjB,aAAc,CACf,CAIL,aAGE,kBAAmB,CACnB,sBAAuB,CACvB,WAAY,CACZ,YAAa,CACb,eAAmB,CACnB,wBAAyB,CACzB,qBAAsB,CACtB,iBAAkB,CAClB,kBAAmB,CACpB,qBAXC,YAAa,CACb,qBAeiB,CALlB,QAKC,gBAAiB,CAGlB,QAGC,YAAa,CACb,kBAAmB,CACnB,6BAA8B,CAE9B,WAAY,CACZ,WAAY,CAEZ,mBAAoB,CACrB,QAGC,YAAa,CACb,qBAAsB,CACtB,kBAAmB,CACnB,SAAU,CAEV,kBACkB,CAKnB,oBAPC,WAAY,CAEZ,iBAWkB,CANnB,YAGC,WAAY,CAEZ,kBACkB,CACnB,cAGC,WAAY,CACZ,WAAY,CACZ,kBAAmB,CACnB,iBAAkB,CACnB,SAGC,6BAA+B,CAC/B,eAAiB,CACjB,cAAe,CACf,gBAAiB,CACjB,YAAa,CACb,kBAAmB,CACnB,oBAAsB,CACtB,aAAc,CACd,gBAAiB,CAClB,mBAGC,SAAU,CACV,UAAW,CAEX,sBAAuB,CACvB,WAAY,CACZ,wBAAyB,CAC1B,aAGC,6BAA+B,CAC/B,iBAAkB,CAClB,eAAiB,CACjB,cAAe,CACf,gBAAiB,CACjB,aAAc,CACf,YAGC,gBAAkB,CAClB,sCAAyC,CACzC,eAAgB,CAChB,cAAe","file":"main.c80997f1.chunk.css","sourcesContent":["body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n","@import \"./styles/includeMedia.scss\";\n\n.App-header {\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n}\n\n.App-link {\n  color: #61dafb;\n}\n\n/* Flex on body */\n\nbody {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 100px;\n  @include media(\"<=phone\") {\n    &:before {\n      content: \"Please use a device with larger screen. Thank you!\";\n      font-family: Roboto, sans-serif;\n      font-style: normal;\n      font-weight: bold;\n      font-size: 2em;\n      line-height: 2em-0.9em;\n      color: #8e8b8b;\n    }\n  }\n  @include media(\"<=tablet\") {\n    padding: 0;\n  }\n}\n\n/* Phone base */\n\n// .phoneBase {\n//   width: 416px;\n//   height: 910px;\n\n//   background: #e5e5e5;\n//   border: 1px solid #e5e5e5;\n//   box-sizing: border-box;\n//   box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n//   border-radius: 10px;\n//   display: flex;\n//   flex-direction: column;\n//   align-items: center;\n// }\n\n.phoneBase {\n  width: 416px;\n  height: 910px;\n\n  background: #e5e5e5;\n  border: 1px solid #e5e5e5;\n  box-sizing: border-box;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  @include media(\"<=phone\") {\n    visibility: hidden;\n  }\n  @include media(\"<=tablet\") {\n    width: 100vw;\n    height: 100vh;\n  }\n}\n\n.message {\n  @include media(\"<=tablet\") {\n    // border: 1px solid red;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    &:before {\n      // padding-left: 140px;\n      // border: 1px solid blue;\n      content: \"CLASSIC LANDLINE PHONE\";\n      // text-align: center;\n\n      font-family: Roboto, sans-serif;\n      font-style: normal;\n      font-weight: bold;\n      font-size: 18px;\n      line-height: 52px;\n      color: #8e8b8b;\n    }\n  }\n}\n\n.phoneScreen {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 368px;\n  height: 300px;\n  background: #ffffff;\n  border: 3px solid #8e8b8b;\n  box-sizing: border-box;\n  border-radius: 8px;\n  margin-bottom: 50px;\n}\n\n.keypad {\n  display: flex;\n  flex-direction: column;\n  align-items: auto;\n  /* border: 1px solid blue; */\n  /* padding-top: 50px; */\n}\n\n.keyRow {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n\n  flex-grow: 0;\n  width: 368px;\n  /* border: 1px solid red; */\n  padding-bottom: 22px;\n}\n\n.button {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 30%;\n  height: 58px;\n  background: #8e8b8b;\n  border-radius: 5px;\n\n  /* font-family: Arial, Helvetica, sans-serif;\n  font-weight: 900;\n  font-size: 1.2em; */\n}\n\n.callButton {\n  width: 237px;\n  height: 58px;\n  background: #4bc038;\n  border-radius: 5px;\n}\n\n.hangUpButton {\n  width: 108px;\n  height: 58px;\n  background: #e21414;\n  border-radius: 5px;\n}\n\n.tagline {\n  font-family: Roboto, sans-serif;\n  font-weight: bold;\n  font-size: 24px;\n  line-height: 28px;\n  display: flex;\n  align-items: center;\n  letter-spacing: 0.02em;\n  color: #8e8b8b;\n  padding-top: 20px;\n}\n\n.screenDisplayArea {\n  width: 90%;\n  height: 90%;\n\n  border: 1px solid green;\n  margin: 30px;\n  overflow-wrap: break-word;\n}\n\n.displayChar {\n  font-family: Roboto, sans-serif;\n  font-style: normal;\n  font-weight: bold;\n  font-size: 48px;\n  line-height: 52px;\n  color: #8e8b8b;\n}\n\n.buttonChar {\n  margin-top: 0.6rem;\n  font-family: Arial, Helvetica, sans-serif;\n  font-weight: 900;\n  font-size: 2rem;\n}\n","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//        https://eduardoboucas.github.io/include-media\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Hugo Giraudel (@hugogiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  \"phone\": 320px,\n  \"tablet\": 768px,\n  \"desktop\": 1024px,\n) !default;\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  \"screen\": \"screen\",\n  \"print\": \"print\",\n  \"handheld\": \"handheld\",\n  \"landscape\": \"(orientation: landscape)\",\n  \"portrait\": \"(orientation: portrait)\",\n  \"retina2x\":\n    \"(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)\",\n  \"retina3x\":\n    \"(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)\",\n) !default;\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  \"px\": 1,\n  \"em\": 0.01,\n  \"rem\": 0.1,\n  \"\": 0,\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: \"desktop\" !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: (\"screen\", \"portrait\", \"landscape\") !default;\n\n////\n/// Cross-engine logging engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists(\"at-error\") {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {\n  }\n}\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {\n}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log(\"`#{$im-no-media-breakpoint}` is not a valid breakpoint.\") {\n    }\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == \"max\" and $value <= $no-media-breakpoint-value) or\n        ($prefix == \"min\" and $value > $no-media-breakpoint-value)\n      {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Hugo Giraudel\n/// @access private\n////\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in (\">=\", \">\", \"<=\", \"<\", \"≥\", \"≤\") {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log(\"No operator found in `#{$expression}`.\");\n}\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: \"width\";\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index((\"<\", \"<=\", \"≤\"), $operator), \"max\", \"min\");\n}\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log(\"Unknown unit `#{unit($value)}`.\");\n  }\n\n  @if $operator == \">\" {\n    $value: $value + $interval;\n  } @else if $operator == \"<\" {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return \"(#{$prefix}-#{$dimension}: #{$value})\";\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Hugo Giraudel\n/// @access private\n////\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == \"number\" {\n    @return $value;\n  } @else if type-of($value) != \"string\" {\n    $_: im-log(\"Value for `to-number` should be a number or a string.\");\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == \"-\");\n  $numbers: (\n    \"0\": 0,\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3,\n    \"4\": 4,\n    \"5\": 5,\n    \"6\": 6,\n    \"7\": 7,\n    \"8\": 8,\n    \"9\": 9,\n  );\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == \"+\" or $first-character == \"-\") {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not(index(map-keys($numbers), $character) or $character == \".\") {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i));\n    }\n\n    @if $character == \".\" {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: (\n    \"px\": 1px,\n    \"cm\": 1cm,\n    \"mm\": 1mm,\n    \"%\": 1%,\n    \"ch\": 1ch,\n    \"pc\": 1pc,\n    \"in\": 1in,\n    \"em\": 1em,\n    \"rem\": 1rem,\n    \"pt\": 1pt,\n    \"ex\": 1ex,\n    \"vw\": 1vw,\n    \"vh\": 1vh,\n    \"vmin\": 1vmin,\n    \"vmax\": 1vmax,\n  );\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log(\"Invalid unit `#{$unit}`.\");\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Hugo Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge(\n    $media-expressions,\n    $tweak-media-expressions\n  ) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or\n    (not $im-media-support and im-intercepts-static-breakpoint($conditions...))\n  {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2) ...) {\n        @content;\n      }\n    }\n  }\n}\n"]}